name: CI
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  repository_dispatch:
    types: [submodule_updated]
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  update-submodules:
    name: Update Submodules
    runs-on: ubuntu-latest
    steps:
      - name: Debug variables
        run: |
          echo "APP_ID: ${{ vars.APP_ID }}"
          echo "APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY != '' && 'set' || 'not set' }}"

      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Debug token
        run: |
          echo "Generated token: ${{ steps.app-token.outputs.token != '' && 'set' || 'not set' }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ steps.app-token.outputs.token }}

      - name: Update submodules to latest commit
        run: |
          SUBMODULE="${{ github.event.client_payload.submodule || 'all' }}"
          if [ "$SUBMODULE" = "all" ]; then
            git submodule update --remote --force
          else
            git submodule update --remote --force "packages/$SUBMODULE"
          fi
          git submodule status
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          if git status --porcelain | grep .; then
            git add .
            git commit -m "Update $SUBMODULE submodule to latest commit"
            git push
          else
            echo "No submodule updates needed"
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: update-submodules
    steps:
      - name: Debug variables
        run: |
          echo "APP_ID: ${{ vars.APP_ID }}"
          echo "APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY != '' && 'set' || 'not set' }}"

      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Debug token
        run: |
          echo "Generated token: ${{ steps.app-token.outputs.token != '' && 'set' || 'not set' }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.11.0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Sync lockfile
        run: |
          rm -f pnpm-lock.yaml
          pnpm install --no-frozen-lockfile
          git add pnpm-lock.yaml
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          if git status --porcelain | grep .; then
            git commit -m "Update pnpm-lock.yaml"
            git push
          else
            echo "No lockfile updates needed"
          fi

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build --log-order=stream
